name: Noodband genereren

on:
  issues:
    types: [opened]
    branches:
      - main

jobs:
  setup-watchcat:
    runs-on: windows-latest
    if: contains(github.event.issue.title, 'Genereer noodband')
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Input and Output Directories
        shell: pwsh
        run: |
          New-Item -ItemType directory -Path "${{ github.workspace }}\input" -Force
          New-Item -ItemType directory -Path "${{ github.workspace }}\output" -Force

      - name: Extract URL and Download MP3
        shell: pwsh
        run: |
          $body = "${{ github.event.issue.body }}"
          if ($body -match "inputurl:\s*(http[s]?:\/\/\S+)") {
            $url = $matches[1]
            Invoke-WebRequest -Uri $url -OutFile "${{ github.workspace }}\input\audio.mp3"
          } else {
            Write-Output "URL not found in issue body."
          }

      - name: Download Thimeo WatchCat Installer
        run: Invoke-WebRequest -Uri "https://www.stereotool.com/download/ThimeoWatchCat_installer_64.exe" -OutFile "ThimeoWatchCat_installer_64.exe"

      - name: Install Thimeo WatchCat
        shell: pwsh
        run: |
          Start-Process -FilePath ".\ThimeoWatchCat_installer_64.exe" -ArgumentList '/S'
          Start-Sleep -Seconds 15

      - name: Copy WatchCat.ini to AppData
        shell: pwsh
        run: |
          $sourcePath = "${{ github.workspace }}\WatchCat.ini"
          $destPath = "$HOME\AppData\Roaming\Thimeo Audio Technology B.V.\WatchCat.ini"
          New-Item -ItemType Directory -Path "$HOME\AppData\Roaming\Thimeo Audio Technology B.V." -Force
          Copy-Item -Path $sourcePath -Destination $destPath

      - name: Check config file and display contents
        shell: pwsh
        run: |
          $configPath = "$HOME\AppData\Roaming\Thimeo Audio Technology B.V.\WatchCat.ini"
          if (Test-Path $configPath) {
            Get-Content $configPath
          } else {
            Write-Output "Config file does not exist."
          }

      - name: Run Thimeo WatchCat to generate audio file
        shell: pwsh
        run: |
          $exePath = "C:\Program Files\Thimeo\WatchCat\ThimeoWatchCat.exe"
          if (Test-Path $exePath) {
            $process = Start-Process -FilePath $exePath -PassThru
            Write-Output "ThimeoWatchCat.exe started with PID: $($process.Id)"
          } else {
            Write-Output "ThimeoWatchCat.exe not found."
          }

      - name: Take Screenshot
        shell: pwsh
        run: |
          Start-Sleep -Seconds 60
          ./screenshot.ps1

      - name: Upload Screenshot
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: "C:/ScreenCapture"

      - name: Waiting for WatchCat to finish
        shell: pwsh
        run: |
          $processedPath = "${{ github.workspace }}\input\Processed"
          $failedPath = "${{ github.workspace }}\input\Failed"
          
          while (-not (Test-Path $processedPath)) {
            if (Test-Path $failedPath) {
              Write-Output "Processing failed, 'Failed' directory found."
              exit 1  # Exit the script with an error status
            }
            Start-Sleep -Seconds 10
            Write-Output "Waiting for 'Processed' directory to appear..."
          }

      - name: Output contents of the output directory
        shell: pwsh
        run: |
          Get-ChildItem "${{ github.workspace }}\output" | ForEach-Object { Write-Output $_.FullName }

      - name: Upload generated file
        uses: actions/upload-artifact@v4
        with:
          name: watchcat-output
          path: "${{ github.workspace }}/output"

      - name: Close the issue
        if: success()
        shell: pwsh
        run: |
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $headers = @{
            Authorization = "token $token"
          }
          $url = "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}"
          Invoke-RestMethod -Uri $url -Method PATCH -Body (@{state = "closed"} | ConvertTo-Json) -Headers $headers -ContentType "application/json"

